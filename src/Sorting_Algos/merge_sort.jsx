const merge_sort = async (arr, setArr, animationSpeed) => {
  async function merge(newArr, l, m, r, animationSpeed) {
    let n1 = m - l + 1;
    let n2 = r - m;
    let L = new Array(n1);
    let R = new Array(n2);
    for (let i = 0; i < n1; i++) L[i] = newArr[l + i];
    for (let j = 0; j < n2; j++) R[j] = newArr[m + 1 + j];
    let i = 0;
    let j = 0;
    let k = l;
    while (i < n1 && j < n2) {
      if (L[i] <= R[j]) {
        newArr[k++] = L[i++];
      } else {
        newArr[k++] = R[j++];
      }
    }
    while (i < n1) {
      newArr[k] = L[i];
      i++;
      k++;
    }
    while (j < n2) {
      newArr[k] = R[j];
      j++;
      k++;
    }
    await new Promise((resolve) => {
      setTimeout(resolve, animationSpeed);
    }); // remember resolve and reject themselves are functions
    setArr([...newArr]);
  }

  async function mergeSort(newArr, l, r, animationSpeed) {
    if (l >= r) {
      return;
    }
    let m = l + parseInt((r - l) / 2);
    await mergeSort(newArr, l, m, animationSpeed);
    await mergeSort(newArr, m + 1, r, animationSpeed);
    await merge(newArr, l, m, r, animationSpeed);
  }

  let newArr = [...arr];
  await mergeSort(newArr, 0, newArr.length - 1, animationSpeed);
  setArr([...newArr]);
  console.log(animationSpeed);
};

export default merge_sort;
// 1) await mergeSort(newArr, l, m);: This line waits for the mergeSort function to fully execute before proceeding. 
//    Since mergeSort is an asynchronous function, the await keyword ensures that the function completes before moving on to the next line.

// 2) await mergeSort(newArr, m + 1, r);: Similarly, this line waits for the second recursive call to mergeSort to complete before proceeding.

// 3) await merge(newArr, l, m, r);: After both recursive calls are completed, this line waits for the merge function to complete before moving on. 
// This is crucial to ensure that the merge operation is performed on the fully sorted sub-arrays generated by the previous recursive calls.
